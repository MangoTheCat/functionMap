% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/edgelist.R
\name{edgelist.from.rpackage}
\alias{edgelist.from.rpackage}
\title{edgelist.from.rpackage}
\usage{
edgelist.from.rpackage(base.path, rfilepattern = "\\\\.[Rr]$",
  force.scan.s4 = TRUE)
}
\arguments{
\item{base.path}{path to the R source, it has to be a package base path, or the result might be empty}

\item{rfilepattern}{some author may use extension ".[qQ][sS]" other than [Rr], this option can select from those}

\item{force.scan.s4}{when the base.path is not a package, this function generally don't get any hint from NAMESPACE and if you insist, it will try hard to scan S4 information}
}
\value{
a data.frame representing the edges of the whole pacakge
}
\description{
Similar to \code{\link{network.from.rpackage}}, but differences.
It try to give even more information on S3,S4,do.call,eval ... etc
}
\details{
Note: \code{dumpS4Generic} will pollute the .GlobalEnv, you should run the function from a clean environment

The working horse is still \code{edgelist.from.rscript}, and the return value have the same structure of \code{\link{edgelist.from.rscript}}

By default, '[' and hence \code{subet} will copy all the attributes, hence those attributes in the edgelist object: 
\code{exported.s3} and \code{exported.s4} will be copied. These two are actually parsed from NAMESPACE file.

But for code definition of S4 methods, they can be identified by checking the \code{rfile} slot of the object: all
the S4 methods implemented in this package are collected to a temporary file started with "S4definition". If you use 
'[' or \code{subset} to get part of the edges, those information for S4 definition edges will be lost, although the 
information of exported S4 and S3 will still be available.
}
\examples{
\dontrun{
el <- edgelist.from.rpackage(
  system.file("examples",'packages','KernSmooth', package = "functionMap")
)
el2 <- edgelist.from.rpackage(
  system.file("examples",'packages','psych', package = "functionMap")
)
el.sp <- edgelist.from.rpackage(
  system.file("examples",'packages','sp', package = "functionMap")
)
}
}

