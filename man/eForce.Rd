% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eForce.R
\name{eForce}
\alias{eForce}
\title{Force directed network graph}
\usage{
eForce(networkMatrix, propertyDf = NULL, size = c(1860, 930),
  display.isolated = FALSE, use.network.attr = FALSE, title = NULL,
  subtitle = NULL, title.x = "right", title.y = "bottom",
  minRadius = 15, maxRadius = 25, scaling = 1.1,
  do.depth.layout = FALSE, depth.layout = c("fixX", "fixY"),
  do.jitter = FALSE, legend = TRUE, legend.x = "left", legend.y = "top",
  legend.orient = c("vertical", "horizontal"), toolbox = TRUE,
  toolbox.x = "right", toolbox.y = "top", tooltip = TRUE,
  show.drawing.tool = FALSE, auto.opt.large = TRUE, gravity = 1e-07,
  roam = TRUE, opt = list())
}
\arguments{
\item{networkMatrix}{either a network object or a adjacency matrix. If a matrix, any \code{NA} is treated as 0.}

\item{propertyDf}{optional, data.frame defining the \code{category}, \code{value} and \code{color} for the vertices.}

\item{size}{size of the output canvas, user may need to adjust this to their screen size}

\item{display.isolated}{decide whether display the isolated vertices or not}

\item{use.network.attr}{if \code{networkMatrix} is a network object and have corresponding attributes 'category', 'value' and 'color', and no \code{propertyDf} is specified, then use them to create a \code{propertyDf} to make the plot}

\item{title}{title of the plot, if \code{NULL}, use the deparsed object name}

\item{subtitle}{subtitle, default is empty}

\item{title.x}{x position of title, by default we put the title to bottom right}

\item{title.y}{y position of title}

\item{minRadius}{the minimal radius of the node, if the node is too small to be seen, user can increase this value}

\item{maxRadius}{the maximal radius of the node, restrict the node not to be too large. Those relative size of node are according to their value.}

\item{scaling}{the scaling layout coefficient, if the node to too close together, user can increate the scaling to make the graph more sparse}

\item{do.depth.layout}{whether layout the graph using depth of nodes}

\item{depth.layout}{when \code{do.depth.layout} is \code{TRUE}, layout horizontal or vertical}

\item{do.jitter}{whether do jitter on the depth}

\item{legend}{whether to show legend for the category of vertex}

\item{legend.x}{x position of legend, default is top left; typically not shown if there is only one category}

\item{legend.y}{y position of legend}

\item{legend.orient}{orientation of legend, can be horizontal or vertical}

\item{toolbox}{show the magic toolbox panel, which allows user to switch between force and chord plot, and allow save the plot}

\item{toolbox.x}{x position of toolbox, default is 'top right'}

\item{toolbox.y}{y position of toolbox}

\item{tooltip}{whether show the floating tip for the node when mouse hovering on the node}

\item{show.drawing.tool}{if show a drawing tool on the toolbox}

\item{auto.opt.large}{automatically tweak parameter for plotting large graph(>500 nodes)}

\item{gravity}{control how close those vertices are}

\item{roam}{Echart options, control how mouse can interactively change the plot, can be \code{TRUE}, 'move', 'scale'}

\item{opt}{other options which can be passed to ECharts.}
}
\value{
recharts object which can be shown as HTML by \code{\link{plot.recharts}}
}
\description{
ECharts style Force network graph visulize the social network matrix data.
}
\details{
When no \code{propertyDf} is provided, and no attributes can be used (either \code{use.network.attr} is \code{FALSE}
or the object lacking such attributes), the category is defined as the outer-degree (number of called functions) of the 
node. The value of node(what you see when your mouse is on the node) is the in-degree (called by how many functions).

When \code{propertyDf} is provided, the \code{category} slot goes to category of the plot and \code{value} goes to value of the plot.

When the object is a network object rather than a simple adjacency matrix, and the vertex has attributes of \code{category} and \code{value},
they will be used in the plot if \code{use.network.attr} is \code{TRUE}. If only \code{category} is available, but \code{value} is not set,
this function will use the out-degree (number of called functions) as the value (note this is different behavior to the default behavior where
out-degree is showed by category and in-degree is displayed as value).  Moreover, if the network object has edge attributes with name \code{weights}, 
this weights will also be shown in the plot.

Another parameter which is useful and deserve explaination is \code{gravity}. When the network contain more than one connected components, 
and if gravity is too small, they will spread quite far away, those isolated points (by default is not displayed) may even fly away.
In this situation, user have to increase the gravity to make them close.
To the contrary, if the graph have too many nodes, the nodes may be very close to each other, too crowded to be seen, 
then a smaller gravity need to be set to stretch them up.


}
\examples{
\dontrun{
testData <- matrix(1:25, nrow=5)
 plot(eForce(testData))

# using a propertyDf
net <- network.from.sascode(
  system.file('examples','SAScode',package='functionMap')
)
propertyDf <- data.frame(
  category = ifelse(net \%v\% 'toplevel', 'toplevel macros', 'inner macros'),
  value=ifelse(net \%v\% 'toplevel', 50, 10),
  color=ifelse(net \%v\% 'toplevel', 'yellow','green')
)
plot(eForce(net[,], propertyDf, gravity=2))
}
}

