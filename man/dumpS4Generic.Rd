% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dumpS4Methods.R
\name{dumpS4Generic}
\alias{dumpS4Generic}
\title{dump and reformat generic functions (S4) in a namespace}
\usage{
dumpS4Generic(ns, style = c("S4", "S3"))
}
\arguments{
\item{ns}{character name for namespace, or an environment object}

\item{style}{S4 style rename method as \code{function[type1,type2,type3]}, S3 style is \code{function.type1.type2.typ3}}
}
\value{
reformated text (source) file
}
\description{
dumpS4Generic
}
\details{
Dump all S4 definition from namespace

The difficulty part of static analysis for S4 methods dispatching is it's hard to determine from code
which method will be called:

For example : \code{plot(x)}

unless we know what \code{x} is, we are not knowing what version of \code{plot} is actually invoked, hence we do not know
the exactly depedency relation (function Map),

This function will change \code{setMethod(methodname, signature, implementation)} to the following format:

\code{methodname.obj1.obj2.obj3 <- implementation}

where \code{obj1, obj2, obj3} are object types in the signatures
}
\examples{
\dontrun{
ordinary.functions <- parseRfolder(
  system.file("examples", "R", package = "functionMap")
)
# need to eval those functions to make the definition into .GlobalEnv
fmap_dir <- system.file("examples", "R", package = "functionMap")
for (i in list.files(fmap_dir, full.names=TRUE, pattern='*.R')) {
  source(i)
}
S4.funs <- dumpS4Generic()
cat(paste(S4.funs,collapse='\\n'), file=(f1<-tempfile()))
all.funs <- c(ordinary.functions, parseRscript(f1))
     
nets <- createNetwork(all.funs)
plot(eForce(nets))
}
}
\author{
Mango solutions
}

